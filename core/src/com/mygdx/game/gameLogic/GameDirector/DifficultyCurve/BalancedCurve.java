package com.mygdx.game.gameLogic.GameDirector.DifficultyCurve;

import com.mygdx.game.gameLogic.GameDirector.StatisticsInfo;

public class BalancedCurve extends Curves {
    private double enemyGenerationPeriod;
    private int maxNumEnemies;

    public BalancedCurve(double enemyCreateDeltaTCutoff, int maxNumEnemies)
    {
        this.enemyGenerationPeriod = enemyCreateDeltaTCutoff;
        this.maxNumEnemies = maxNumEnemies;
    }

    private static final double JUMP_WEIGHT = 4.0;
    private static final double MOV_WEIGHT = 1.0;
    private static final double STRESS_INPUT_PORTION = 0.25; // STRESS_INPUT_PORTION /)1.0 + STRESS_INPUT_PORTION) is the amount of difficulty generated by stress
    private static final double STRESS_LIGHT_PORTION = 0.25;
    private static double stressDifficulty(final double difficulty, StatisticsInfo statistics)
    {
        final double jumpStressRatio = 1.0 - statistics.getJumpStress();
        final double movStressRatio = 1.0 - statistics.getMovStress();
        final double compositeInputRatio = (JUMP_WEIGHT * jumpStressRatio + MOV_WEIGHT * movStressRatio)
                / (JUMP_WEIGHT + MOV_WEIGHT);

        final double lightRatio = statistics.getLightLevel();

        System.out.println("input portion " + compositeInputRatio +" light portion " + lightRatio);

        final double inputPortion = compositeInputRatio * CURVES_MAX_DIFFICULTY * STRESS_INPUT_PORTION;
        final double lightPortion = lightRatio * CURVES_MAX_DIFFICULTY * STRESS_LIGHT_PORTION;
        final double stressedDifficulty = ( difficulty + inputPortion + lightPortion)
                / (1.0 + STRESS_INPUT_PORTION + STRESS_LIGHT_PORTION);

        return stressedDifficulty;
    }

    @Override
    public double generateDifficulty(StatisticsInfo statistics) {

        final boolean bEnemyNotTooSoon = statistics.getLastCreatedEnemyDeltaT() > enemyGenerationPeriod;
        final boolean bNotTooManyEnemies = statistics.getNumberOfEnemies() < maxNumEnemies;

        if (bEnemyNotTooSoon && bNotTooManyEnemies) // create enemy
        {
            final double difficulty = random.nextDouble() * CURVES_MAX_DIFFICULTY; //base difficulty, it's a portion of the final difficulty
            final double stressedDifficulty = stressDifficulty(difficulty, statistics);

            return stressedDifficulty ;
        }
        else
            return CURVES_NO_ENEMY_CREATED;
    }
}
