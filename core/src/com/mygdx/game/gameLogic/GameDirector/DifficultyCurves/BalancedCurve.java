package com.mygdx.game.gameLogic.GameDirector.DifficultyCurves;

import com.mygdx.game.gameLogic.GameDirector.Statistic.StatisticsInfo;

/**
 * Should generate difficulty based on AI decisions, based on an evaluation of player stress, and some randomness (a portion of difficulty)
 */
public class BalancedCurve extends Curve {
    private double enemyGenerationPeriod;
    private int maxNumEnemies;

    public BalancedCurve(double enemyCreateDeltaTCutoff, int maxNumEnemies)
    {
        this.enemyGenerationPeriod = enemyCreateDeltaTCutoff;
        this.maxNumEnemies = maxNumEnemies;
    }


    private static final double STRESS_DIFFICULTY_PORTION = 1.0; // STRESS_DIFFICULTY_PORTION /)1.0 + STRESS_DIFFICULTY_PORTION) is the amount of difficulty generated by stress
    private static double decideDifficulty(final double difficulty, StatisticsInfo statistics)
    {
        final double stressRatio = 1.0 - statistics.getStressLevel();

        final double stressPortion = stressRatio * CURVES_MAX_DIFFICULTY * STRESS_DIFFICULTY_PORTION;

        final double stressedDifficulty = ( difficulty + stressPortion)
                / (1.0 + STRESS_DIFFICULTY_PORTION);

//        System.out.println("Diff: " + stressedDifficulty);

        return stressedDifficulty;
}

    /**
     * Generates a diffiuclty with a randomness portion and a AI decided portion
     * @param statistics queried object
     * @return difficulty generated or a special value indicated no enemy is to be generated
     */
    @Override
    public double generateDifficulty(StatisticsInfo statistics) {

        final boolean bEnemyNotTooSoon = statistics.getLastCreatedEnemyDeltaT() > enemyGenerationPeriod;
        final boolean bNotTooManyEnemies = statistics.getNumberOfEnemies() < maxNumEnemies;

        if (bEnemyNotTooSoon && bNotTooManyEnemies) // create enemy
        {
            final double difficulty = random.nextDouble() * CURVES_MAX_DIFFICULTY; //base difficulty, it's a portion of the final difficulty
            final double stressedDifficulty = decideDifficulty(difficulty, statistics);

            return stressedDifficulty ;
        }
        else
            return CURVES_NO_ENEMY_CREATED;
    }
}
